// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

enum UserRole {
  ADMIN
  STUDENT
  TEACHER
  SUPPORT
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  phone         String?
  password      String?
  createdAt     DateTime  @default(now())
  enable        Boolean  @default(false)
  updatedAt     DateTime  @updatedAt
  experience    Int       @default(0)

  role           UserRole           @default(STUDENT)
  accounts       Account[]
  course         Course[]
  userProgress   UserProgress[]
  purchase       Purchase[]
  stripeCustomer StripeCustomer[]
  messages       Message[]
  conversations  UserConversation[]
  Quiz           Quiz[]
  seenMessages   Message[]          @relation("Seen")
  statistics     Statistics[]       // New relation

  @@map("users")
}

model Question {
  id             String      @id @default(cuid())
  mainQuestion   String
  choices        Json
  correctAnswer  Int
  answeredResult Int         @default(-1)
  statistics     Statistics[] 
  quiz           Quiz?        @relation(fields: [quizId], references: [id])
  quizId         String?
}

model Statistics {
  id                String     @id @default(cuid())
  totalAttempts     Int        @default(0)
  correctAttempts   Int        @default(0)
  incorrectAttempts Int        @default(0)
  
  userId            String
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  questionId        String
  question          Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Quiz {
  id            String     @id @default(cuid())
  icon          String
  quizTitle     String
  quizQuestions Question[]
  userId        String     @map("user_id")
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Conversation {
  id            String   @id @default(uuid()) @map("_id")
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?

  // Relationships
  messages     Message[]
  participants UserConversation[]
}

model Message {
  id        String   @id @default(uuid()) @map("_id")
  body      String?
  image     String?
  createdAt DateTime @default(now())

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  seen User[] @relation("Seen")
}

model UserConversation {
  userId         String
  conversationId String

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@id([userId, conversationId]) // Composite key to ensure each user-conversation pair is unique
}

model Course {
  id          String  @id @default(uuid())
  userId      String  @map("user_id")
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)
  enable      Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id        String  @id @default(uuid())
  userId    String  @map("user_id")
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id       String @id @default(uuid())
  userId   String @map("user_id")
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  teacherRevenue Float   
  platformFee    Float 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @map("user_id")
  user             User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
